diff --git a/db.py b/db.py
--- a/db.py
+++ b/db.py
@@
-    def _ensure_engine():
+    def _ensure_engine():
         global _engine
-        if _engine is None:
-            url = os.environ.get("DATABASE_URL") or "sqlite+pysqlite:///:memory:"
+        if _engine is None:
+            url = os.environ.get("DATABASE_URL")
+            if not url:
+                db_path = os.environ.get("DATABASE_PATH")
+                url = f"sqlite+pysqlite:///{db_path}" if db_path else "sqlite+pysqlite:///:memory:"
             _engine = create_engine(url, future=True)
         return _engine
@@
     def get_db():
         \"\"\"Return a SQLAlchemy Connection (used by routes.* calling conn.execute(text(...))).\"\"\"
         return _ensure_engine().connect()
+
+    # Back-compat shims used by scripts/tests
+    def get_engine():
+        \"\"\"Return the SQLAlchemy Engine (compat shim).\"\"\"
+        return _ensure_engine()
+
+    def get_dialect() -> str:
+        \"\"\"Return the SQL dialect name (e.g., 'postgresql', 'sqlite').\"\"\"
+        return str(_ensure_engine().dialect.name)
diff --git a/erp/__init__.py b/erp/__init__.py
--- a/erp/__init__.py
+++ b/erp/__init__.py
@@
-from .extensions import csrf, limiter, login_manager, db
+from .extensions import csrf, limiter, login_manager, db
+try:
+    # Re-export for backward compatibility; some modules import: from erp import redis_client
+    from db import redis_client  # type: ignore  # noqa: F401
+except Exception:
+    redis_client = None  # type: ignore
+__all__ = ["create_app", "redis_client"]