diff --git a/erp/__init__.py b/erp/__init__.py
index 1111111..2222222 100644
--- a/erp/__init__.py
+++ b/erp/__init__.py
@@ -1,20 +1,49 @@
-from flask import Flask
-from .extensions import db, migrate, cache, socketio, login_manager
+from flask import Flask
+from .extensions import db, migrate, cache, socketio, login_manager, csrf
+
+import inspect

 def create_app(config_object="config.Config"):
     app = Flask(__name__)
     app.config.from_object(config_object)

     # init extensions
-    db.init_app(app)
-    migrate.init_app(app, db)
-    cache.init_app(app)
-    socketio.init_app(app, cors_allowed_origins="*")
-    login_manager.init_app(app)
+    db.init_app(app)
+    migrate.init_app(app, db)
+    cache.init_app(app)
+    socketio.init_app(app, cors_allowed_origins="*")
+    login_manager.init_app(app)
+    csrf.init_app(app)

     # Blueprints
-    from importlib import import_module
-    from pkgutil import iter_modules
-    import erp.routes as routes_pkg
-    for _, modname, _ in iter_modules(routes_pkg.__path__, routes_pkg.__name__ + "."):
-        mod = import_module(modname)
-        if hasattr(mod, "bp"):
-            app.register_blueprint(mod.bp)
+    # Auto-discover ANY Blueprint in erp.routes.* instead of only `bp`
+    from importlib import import_module
+    from pkgutil import iter_modules
+    from flask import Blueprint
+    import erp.routes as routes_pkg
+    for _, modname, _ in iter_modules(routes_pkg.__path__, routes_pkg.__name__ + "."):
+        mod = import_module(modname)
+        for name, obj in inspect.getmembers(mod):
+            if isinstance(obj, Blueprint):
+                app.register_blueprint(obj)
+
+    # Jinja globals: csrf_token for raw forms
+    @app.context_processor
+    def inject_globals():
+        try:
+            from flask_wtf.csrf import generate_csrf
+        except Exception:  # fail-soft in case flask-wtf not available
+            def generate_csrf(): return ""
+        return {"app_name": "ERP-BERHAN", "csrf_token": generate_csrf}

     return app
diff --git a/erp/extensions.py b/erp/extensions.py
index 1111111..2222222 100644
--- a/erp/extensions.py
+++ b/erp/extensions.py
@@ -1,12 +1,31 @@
 from flask_sqlalchemy import SQLAlchemy
 from flask_migrate import Migrate
 from flask_caching import Cache
 from flask_socketio import SocketIO
 from flask_login import LoginManager
+from flask_wtf.csrf import CSRFProtect

 db = SQLAlchemy()
 migrate = Migrate()
 cache = Cache()
 socketio = SocketIO()
 login_manager = LoginManager()
+csrf = CSRFProtect()
+
+# Provide a safe user_loader to satisfy Flask-Login at template render time.
+@login_manager.user_loader
+def load_user(user_id):
+    # Avoid import cycles; return None if models/imports not ready.
+    try:
+        from erp.db import db as _db  # if you keep db in erp.db
+    except Exception:
+        _db = db
+    try:
+        # Adjust import if your User model lives elsewhere
+        from erp.models import User  # type: ignore
+    except Exception:
+        return None
+    try:
+        return _db.session.get(User, int(user_id))
+    except Exception:
+        return None
diff --git a/config.py b/config.py
index 1111111..2222222 100644
--- a/config.py
+++ b/config.py
@@ -1,8 +1,19 @@
 import os

 class Config:
-    SECRET_KEY = os.getenv("SECRET_KEY", "dev-secret")
+    # Fail closed in production if SECRET_KEY is missing; keep dev fallback.
+    _env = os.getenv("FLASK_ENV", "production")
+    SECRET_KEY = os.getenv("SECRET_KEY") or ("dev-secret" if _env != "production" else None)
+    if SECRET_KEY is None:
+        raise RuntimeError("SECRET_KEY is not set for production environment")
     SQLALCHEMY_DATABASE_URI = os.getenv("DATABASE_URL", "sqlite:///dev.db")
     SQLALCHEMY_TRACK_MODIFICATIONS = False
     CACHE_TYPE = "SimpleCache"
     RATELIMIT_STORAGE_URI = os.getenv("REDIS_URL", "memory://")
diff --git a/erp/templates/base.html b/erp/templates/base.html
index 1111111..2222222 100644
--- a/erp/templates/base.html
+++ b/erp/templates/base.html
@@ -33,7 +33,7 @@
-      <img src="/static/pictures/BERHAN%20PHARMA%20LOGO.jpg" alt="Logo" height="48">
+      <img src="{{ url_for('static', filename='pictures/BERHAN-PHARMA-LOGO.jpg') }}" alt="Logo" height="48">
       <h1 class="ms-3 h4 mb-0">{{ app_name }}</h1>
     </header>
     {% block content %}{% endblock %}
diff --git a/scripts/migrations/automerge_and_upgrade.py b/scripts/migrations/automerge_and_upgrade.py
index 1111111..2222222 100644
--- a/scripts/migrations/automerge_and_upgrade.py
+++ b/scripts/migrations/automerge_and_upgrade.py
@@ -1,40 +1,44 @@
-# Previous logic attempted to merge arbitrary revisions (incl. non-heads),
-# which breaks on Render with placeholder/duplicate IDs.
+"""
+Safe automerge+upgrade for Alembic.
+Merges only true heads; never references arbitrary/placeholder revisions.
+"""
 import sys
-from datetime import datetime, UTC
+from datetime import datetime, timezone
 from alembic import command
 from alembic.config import Config
 from alembic.script import ScriptDirectory

 def main():
     cfg = Config("alembic.ini")
     script = ScriptDirectory.from_config(cfg)
-    heads = list(script.get_heads())
-    if len(heads) > 1:
-        command.merge(cfg, heads, message=f"automerge {datetime.now(UTC):%Y-%m-%d %H:%M:%S}")
-    command.upgrade(cfg, "head")
+    heads = list(script.get_heads())
+    if len(heads) > 1:
+        command.merge(cfg, heads, message=f"automerge {datetime.now(timezone.utc):%Y-%m-%d %H:%M:%S}")
+    command.upgrade(cfg, "head")
     return 0

 if __name__ == "__main__":
     sys.exit(main())
diff --git a/migrations/env.py b/migrations/env.py
index 1111111..2222222 100644
--- a/migrations/env.py
+++ b/migrations/env.py
@@ -1,10 +1,12 @@
 from alembic import context
 from sqlalchemy import engine_from_config, pool
 from logging.config import fileConfig
+from erp.extensions import db

 # this is the Alembic Config object, which provides
 # access to the values within the .ini file in use.
 config = context.config

 # Interpret the config file for Python logging.
 if config.config_file_name is not None:
     fileConfig(config.config_file_name)

-# target_metadata = None
+target_metadata = db.metadata
diff --git a/wsgi.py b/wsgi.py
index 1111111..2222222 100644
--- a/wsgi.py
+++ b/wsgi.py
@@ -1,5 +1,12 @@
-from erp import create_app
-app = create_app()
+"""
+Gunicorn entrypoint for Render with eventlet.
+Ensures eventlet monkey_patch() happens before any other imports to avoid
+'RLock(s) were not greened' warnings/errors.
+"""
+import eventlet
+eventlet.monkey_patch()
+
+from erp import create_app
+app = create_app()
