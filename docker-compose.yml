version: '3.8'
services:
  web:
    build: .
    command: sh -c "gunicorn --config gunicorn.conf.py wsgi:app"
    environment:
      ENV: production
      DATABASE_URL: postgresql://erp_app:${APP_DB_PASSWORD}@db:5432/erp?sslmode=disable
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRETS: ${JWT_SECRETS}
      SENTRY_DSN: ${SENTRY_DSN}
      BACKUP_ENCRYPTION_KEY: ${BACKUP_ENCRYPTION_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    security_opt:
      - no-new-privileges:true
      - seccomp:./deploy/seccomp.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://web:8000/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
  worker:
    build: .
    command: sh -c "celery -A erp.app.celery worker --loglevel=info"
    environment:
      ENV: production
      DATABASE_URL: postgresql://erp_app:${APP_DB_PASSWORD}@db:5432/erp?sslmode=disable
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      BACKUP_ENCRYPTION_KEY: ${BACKUP_ENCRYPTION_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    security_opt:
      - no-new-privileges:true
      - seccomp:./deploy/seccomp.json
    healthcheck:
      test: ["CMD", "celery", "-A", "erp.app.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
  beat:
    build: .
    command: sh -c "celery -A erp.app.celery beat --loglevel=info"
    environment:
      ENV: production
      DATABASE_URL: postgresql://erp_app:${APP_DB_PASSWORD}@db:5432/erp?sslmode=disable
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      BACKUP_ENCRYPTION_KEY: ${BACKUP_ENCRYPTION_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    security_opt:
      - no-new-privileges:true
      - seccomp:./deploy/seccomp.json
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep 'celery beat' | grep -qv grep"]
      interval: 30s
      timeout: 10s
      retries: 3
  backup:
    build: .
    command: sh -c "while true; do python backup.py; sleep 86400; done"
    environment:
      ENV: production
      DATABASE_URL: postgresql://erp_app:${APP_DB_PASSWORD}@db:5432/erp?sslmode=disable
      BACKUP_ENCRYPTION_KEY: ${BACKUP_ENCRYPTION_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_ENDPOINT: ${S3_ENDPOINT}
      AWS_REGION: ${AWS_REGION}
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      db:
        condition: service_healthy
    restart: always
    security_opt:
      - no-new-privileges:true
      - seccomp:./deploy/seccomp.json
  monitor:
    build: .
    command: sh -c "while true; do python scripts/monitor_queue.py; sleep 60; done"
    environment:
      ENV: production
      CELERY_BROKER_URL: redis://redis:6379/0
      REDIS_URL: redis://redis:6379/0
      ALERT_EMAIL: ${ALERT_EMAIL}
      SLACK_WEBHOOK: ${SLACK_WEBHOOK}
    depends_on:
      web:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    security_opt:
      - no-new-privileges:true
      - seccomp:./deploy/seccomp.json
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: erp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      APP_DB_PASSWORD: ${APP_DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./deploy/init-app-user.sh:/docker-entrypoint-initdb.d/10-init-app-user.sh:ro
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d $${POSTGRES_DB:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  pgdata:
  redisdata:
